"use client";

import { useParams, useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import styles from "./page.module.css";
import Link from "next/link";
import Card from "@/components/Card/Card";

export default function MusicPage() {
  // Obt√©m os par√¢metros da URL, especificamente o 'id' da playlist e o 'musicId' da m√∫sica
  const { id, musicId } = useParams() as { id: string; musicId: string };
  const router = useRouter(); 

  // Estado para armazenar as m√∫sicas da playlist
  const [musicas, setMusicas] = useState<
    {
      youtubeUrl: string; // URL do v√≠deo no YouTube
      title: string; // T√≠tulo da m√∫sica
    }[]
  >([]);

  // Hook useEffect que √© executado ao montar o componente
  useEffect(() => {
    // Tenta pegar as m√∫sicas armazenadas no localStorage
    const stored = localStorage.getItem("playlistTracks");
    if (stored) {
      // Se encontrar, converte o valor armazenado em JSON e atualiza o estado 'musicas'
      setMusicas(JSON.parse(stored));
    }
  }, []); // O array vazio [] garante que o c√≥digo ser√° executado apenas uma vez ao montar o componente

  // Ajusta o √≠ndice da m√∫sica para come√ßar do 0 (pois musicId come√ßa do 1 na URL)
  const musicIndex = parseInt(musicId) - 1;

  // Verifica se o √≠ndice da m√∫sica √© v√°lido
  if (isNaN(musicIndex) || musicIndex < 0 || musicIndex >= musicas.length) {
    // Caso o √≠ndice da m√∫sica esteja fora do intervalo, exibe uma mensagem
    return <div>√çndice de m√∫sica fora do intervalo</div>;
  }

  // Obt√©m a m√∫sica do estado com base no √≠ndice
  const musica = musicas[musicIndex];

  const irParaAnterior = () => {
    if (musicIndex > 0) {
      // Redireciona para a p√°gina da m√∫sica anterior
      router.push(`/playlist/${id}/music/${musicIndex}`);
    }
  };

  const irParaProxima = () => {
    if (musicIndex < musicas.length - 1) {
      // Redireciona para a p√°gina da pr√≥xima m√∫sica
      router.push(`/playlist/${id}/music/${musicIndex + 2}`);
    }
  };

  return (
    <main className="main">
      {/* Se√ß√£o de breadcrumb de navega√ß√£o */}
      <Card>
        <header className={` ${styles.breadcrumbContainer}`}>
          <nav className={styles.breadcrumb}>
            <Link href="/" className={styles.breadcrumbLink}>
              üè† In√≠cio
            </Link>
            <span className={styles.separator}>/</span>
            <Link href={`/playlist/${id}`} className={styles.breadcrumbLink}>
              Playlist
            </Link>
            <span className={styles.separator}>/</span>
            <span className={styles.breadcrumbLink}>
              M√∫sica {musicIndex + 1}
            </span>
          </nav>
        </header>
      </Card>
      <br />
      <Card>
        <section>
          {/* Player do YouTube incorporado com a URL da m√∫sica */}
          <iframe
            className={styles.youtubePlayer}
            src={`https://www.youtube.com/embed/${
              musica.youtubeUrl.split("v=")[1]
            }`}
          ></iframe>
        </section>
      </Card>
      <br />
      <Card>
        <header>
          <h1 className={styles.title}>{musica.title}</h1>
        </header>
        <div className={styles.controls}>
          <button
            onClick={irParaAnterior}
            className={styles.playButton}
            disabled={musicIndex === 0} // Desabilita o bot√£o se for a primeira m√∫sica
          >
            ‚èÆ Anterior
          </button>
          
          <button
            onClick={irParaProxima}
            className={styles.playButton}
            disabled={musicIndex === musicas.length - 1} // Desabilita o bot√£o se for a √∫ltima m√∫sica
          >
            Pr√≥xima ‚è≠
          </button>
        </div>
      </Card>
    </main>
  );
}
